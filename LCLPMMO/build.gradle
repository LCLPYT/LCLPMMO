buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

plugins {
    id 'org.ajoberstar.grgit' version '3.1.1'
}

ext {
    SPEC_VERSION = '1.4'
}

def getVersion = {
    //TAG-offset-hash
    def raw = grgit.describe(longDescr: true, tags:true)
    def desc = (raw == null ? '0.0-0-unknown' : grgit.describe(longDescr: true, tags:true)).split('-') as List
    def hash = desc.remove(desc.size() - 1)
    def offset = desc.remove(desc.size() - 1)
    def tag = desc.join('-')
    def branch = grgit.branch.current().name
    if (branch in ['master', 'HEAD'])
        branch = null
    SPEC_VERSION = tag
    return "${tag}.${offset}${t -> if (branch != null) t << '-' + branch}".toString()
}

version = getVersion()
group = 'work.lclpnet.mmo'
archivesBaseName = 'lclpmmo'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            // Mixin debug
            property "mixin.debug.export", "true"
            property "mixin.debug", "true"
            property "mixin.env.shiftByViolation", "ignore"

            environment("PULSE_RUNTIME_PATH", "/run/user/1000/pulse") // Required to hear sound in some distributions (using pulse audio)
            
            args '--mixin', 'mixins.lclpmmo.json'

            mods {
                lclpmmo {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            // Mixin debug
            property "mixin.debug.export", "true"
            property "mixin.debug", "true"
            property "mixin.env.shiftByViolation", "ignore"
            
            args '--mixin', 'mixins.lclpmmo.json'

            mods {
                lclpmmo {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'lclpmmo', '--all', '--output', file('src/generated/resources/')

            mods {
                lclpmmo {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mmo.refmap.json"
}

repositories {
    maven { url = "https://repo.spongepowered.org/maven" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.3-34.1.10'
    implementation "org.spongepowered:mixin:0.8"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

jar {
    manifest {
        attributes([
            "Specification-Title": "LCLPMMO",
            "Specification-Vendor": "LCLPNetwork",
            "Specification-Version": SPEC_VERSION,
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"LCLPNetwork",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConnector": "work.lclpnet.mmo.asm.MMOMixinConnector"
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact deobfJar
            artifact reobfArtifact
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            if (project.hasProperty('mavenPassword') && project.hasProperty('mavenHost')) {
                credentials {
                    username project.properties.mavenUser
                    password project.properties.mavenPassword
                }
                url project.properties.mavenHost
            } else {
                url "file:///${project.projectDir}/mcmodsrepo"
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task deobfJar(type: Jar) { // Generate deobfuscated
    from sourceSets.main.output
    classifier = 'deobf'
}
tasks.build.dependsOn('sourcesJar', 'deobfJar')

artifacts {
    archives deobfJar
    archives sourcesJar
}

processResources {
	inputs.property 'version', project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		expand 'version':project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}