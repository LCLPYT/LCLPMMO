plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'gradle-build-utils'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

Properties props = loadProperties.call('publish.properties')

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = gitVersion.call()
group = project.maven_group

repositories {
    mavenCentral()

    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    // for Mod Menu
    maven {
        name = "Terraformersmc"
        url = "https://maven.terraformersmc.com/releases"
    }

    // for GeckoLib
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    /* Mods that are on the client later on (used to resemble a production environment as close as possible) */
    // LCLPNetwork mods
    modImplementation "work.lclpnet.mods:mmocontent:${project.mmocontent_version}"
    modImplementation "work.lclpnet.mods:mmoquark:${project.mmoquark_version}"
    modImplementation "work.lclpnet.mods:mmofurniture:${project.mmofurniture_version}"

    // CurseForge mods
    modImplementation "curse.maven:lazydfu-433518:${project.lazydfu_version}"
    modImplementation "curse.maven:entityculling-448233:${project.entityculling_version}"
    modImplementation "curse.maven:oauth-fabric-515054:${project.oauth_version}"
    modImplementation "curse.maven:bobby-409301:${project.bobby_version}"
    modImplementation "curse.maven:sodium-extra-447673:${project.sodiumextra_version}"
    modImplementation "curse.maven:reeses-sodium-options-511319:${project.sodiumoptions_version}"
    modImplementation "curse.maven:irisshaders-455508:${project.irisshaders_version}"

    // Modrinth mods
    modImplementation "maven.modrinth:sodium:${project.sodium_version}"

    // other mods
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"
    modImplementation "org.anarres:jcpp:${project.jcpp_version}" // Preprocessing library used by Iris

    /* other Java dependencies */
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation "work.lclpnet:lclpnetwork-api:${project.lclpnetwork_api_version}"
    implementation "work.lclpnet:lclpstorage:${project.lclpstorage_version}"
}

shadowJar {
    exclude 'mappings/mappings.tiny'

    dependencies {
        include(dependency('work.lclpnet:lclpnetwork-api'))
    }

    relocate 'work.lclpnet.lclpnetwork', 'mmodep.work.lclpnet.lclpnetwork'

    archiveClassifier.set('')
}

loom {
    accessWidenerPath = file("src/main/resources/lclpmmo.accesswidener")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release.set(targetVersion)
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present
    withSourcesJar()
}

jar {
    from("LICENSE.md") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

tasks.build.dependsOn(shadowJar)

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            pom {
                name = 'LCLPMMO'
                description = 'A mod that adds MMO RPG content to Minecraft. Indended to be used on LCLPServer 5.0'
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            }
            else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}
